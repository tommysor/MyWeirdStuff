name: Deployment

on:
  workflow_dispatch:
    inputs:
      commitHash:
        description: 'The Commit hash to deploy'
        required: true
        type: string
  workflow_run:
    workflows:
    - ci
    types:
    - completed
    branches:
    - main

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: false

permissions:
  id-token: write
  contents: read

env:
  CONTAINER_VERSION_TAG: ${{ github.run_id }}-${{ github.run_attempt }}
  APISERVICE_CONTAINERREPOSITORY: 'apiservice'
  WEBFRONTEND_CONTAINERREPOSITORY: 'web'

jobs:
  commit:
    runs-on: ubuntu-latest
    outputs:
      commitHash: ${{ steps.setHash.outputs.commitHash }}
    steps:      
    - name: download
      if: github.event_name == 'workflow_run'
      uses: actions/download-artifact@v4
      with:
        name: lastSuccessfulCommit
        run-id: ${{ github.event.workflow_run.id }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
    - name: setHash
      id: setHash
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "commitHash=${{ github.event.inputs.commitHash }}"
          echo "commitHash=${{ github.event.inputs.commitHash }}" >> "$GITHUB_OUTPUT"
        else
          echo "commitHash=$(cat commitHash.txt)"
          echo "commitHash=$(cat commitHash.txt)" >> "$GITHUB_OUTPUT"
        fi
  build-test:
    runs-on: ubuntu-latest
    needs: commit
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ needs.commit.outputs.commitHash }}
    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: | 
          9.0
          8.0
        dotnet-quality: 'preview'
    - name: workload
      run: |
        dotnet workload install aspire
    - name: test
      run: |
        dotnet test

  deploy-shared:
    runs-on: ubuntu-latest
    needs: commit
    environment: Shared
    outputs:
      containerRegistryUrl: ${{ steps.deploy.outputs.containerRegistryUrl }}
      managedIdentityName: ${{ steps.deploy.outputs.managedIdentityName }}
      apiserviceContainerImage: ${{ steps.deploy.outputs.apiserviceContainerImage }}
      webfrontendContainerImage: ${{ steps.deploy.outputs.webfrontendContainerImage }}
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ needs.commit.outputs.commitHash }}
    - uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - name: deploy
      id: deploy
      env:
        deploymentName: ${{ vars.RG_SHARED }}-$(date +%Y-%m-%dT%H.%M.%S)-$(git rev-parse --short ${{ github.sha }})
      run: |
        echo 'Deploy shared resource group'

        az bicep lint --file .platform/main.shared.bicep

        deployResult=$(az deployment group create \
          --mode Complete \
          --resource-group "${{ vars.RG_SHARED }}" \
          --name "${{ env.deploymentName }}" \
          --template-file ./.platform/main.shared.bicep \
          )

        echo "# Deploy result"
        echo $deployResult
        echo "# ---"
        
        echo "# setting outputs"
        
        # containerRegistryUrl
        containerRegistryUrl=$(echo $deployResult | jq --raw-output '.properties.outputs.containerRegistryUrl.value')
        echo "containerRegistryUrl=$containerRegistryUrl" >> $GITHUB_OUTPUT
        # managedIdentityName
        managedIdentityName=$(echo $deployResult | jq --raw-output '.properties.outputs.managedIdentityName.value')
        echo "managedIdentityName: $managedIdentityName"
        echo "managedIdentityName=$managedIdentityName" >> $GITHUB_OUTPUT

        # Predict container image names now that we have the container registry url
        apiserviceContainerImage=$containerRegistryUrl/${{ env.APISERVICE_CONTAINERREPOSITORY }}:${{ env.CONTAINER_VERSION_TAG }}
        echo "#SET apiserviceContainerImage=$apiserviceContainerImage"
        echo "apiserviceContainerImage=$apiserviceContainerImage" >> $GITHUB_OUTPUT
        webfrontendContainerImage=$containerRegistryUrl/${{ env.WEBFRONTEND_CONTAINERREPOSITORY }}:${{ env.CONTAINER_VERSION_TAG }}
        echo "#SET webfrontendContainerImage=$webfrontendContainerImage"
        echo "webfrontendContainerImage=$webfrontendContainerImage" >> $GITHUB_OUTPUT
        
        echo "# done"

  publish-apiservice:
    runs-on: ubuntu-latest
    needs:
    - commit
    - build-test
    - deploy-shared
    env:
      containerRegistryUrl: ${{ needs.deploy-shared.outputs.containerRegistryUrl }}
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ needs.commit.outputs.commitHash }}
    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0'
        dotnet-quality: 'preview'

    - name: 'Az login'
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: login containerRegistry
      run: az acr login --name ${{ env.containerRegistryUrl }}

    - name: publish apiservice
      run: |
        echo "Publishing apiservice"

        pushd src/MyWeirdStuff.ApiService

        dotnet publish \
          -p ContainerRegistry='${{ env.containerRegistryUrl }}' \
          -p PublishProfile=DefaultContainer \
          -p ContainerImageTags='"${{ env.CONTAINER_VERSION_TAG }}"' \
          -p ContainerRepository=${{ env.APISERVICE_CONTAINERREPOSITORY }}

        popd

  publish-webfrontend:
    runs-on: ubuntu-latest
    needs:
    - commit
    - build-test
    - deploy-shared
    env:
      containerRegistryUrl: ${{ needs.deploy-shared.outputs.containerRegistryUrl }}
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ needs.commit.outputs.commitHash }}
    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0'
        dotnet-quality: 'preview'

    - name: 'Az login'
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: login containerRegistry
      run: az acr login --name ${{ env.containerRegistryUrl }}

    - name: publish webfrontend
      run: |
        echo "Publishing webfrontend"

        pushd src/MyWeirdStuff.Web

        dotnet publish \
          -p ContainerRegistry='${{ env.containerRegistryUrl }}' \
          -p PublishProfile=DefaultContainer \
          -p ContainerImageTags='"${{ env.CONTAINER_VERSION_TAG }}"' \
          -p ContainerRepository=${{ env.WEBFRONTEND_CONTAINERREPOSITORY }}

        popd

  deploy-test:
    uses: ./.github/workflows/deploy.yml
    needs:
    - commit
    - deploy-shared
    - publish-apiservice
    - publish-webfrontend
    with:
      commitHash: ${{ needs.commit.outputs.commitHash }}
      environment: 'Test'
      containerRegistryUrl: ${{ needs.deploy-shared.outputs.containerRegistryUrl }}
      managedIdentityName: ${{ needs.deploy-shared.outputs.managedIdentityName }}
      apiserviceContainerImage: ${{ needs.deploy-shared.outputs.apiserviceContainerImage }}
      webfrontendContainerImage: ${{ needs.deploy-shared.outputs.webfrontendContainerImage }}
    secrets: inherit

  acceptance-test:
    runs-on: ubuntu-latest
    needs:
    - commit
    - deploy-test
    env:
      targetUrl: ${{ needs.deploy-test.outputs.webfrontendUrl }}
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ needs.commit.outputs.commitHash }}
    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: | 
          9.0
          8.0
        dotnet-quality: 'preview'

    - name: Setup Workload
      run: |
        dotnet workload install aspire
    - name: Setup Playwright
      run: |
        pushd ./specification
        dotnet build
        popd
        pwsh specification/Specifications/bin/Debug/net9.0/playwright.ps1 install --with-deps
    - name: Run Specifications
      run: |
        pushd ./specification
        SPECIFICATIONS_BASEADDRESS=${{ env.targetUrl }} \
          dotnet test
        popd

  deploy-prod:
    uses: ./.github/workflows/deploy.yml
    needs:
    - acceptance-test
    - commit
    - deploy-shared
    with:
      commitHash: ${{ needs.commit.outputs.commitHash }}
      environment: 'Production'
      containerRegistryUrl: ${{ needs.deploy-shared.outputs.containerRegistryUrl }}
      managedIdentityName: ${{ needs.deploy-shared.outputs.managedIdentityName }}
      apiserviceContainerImage: ${{ needs.deploy-shared.outputs.apiserviceContainerImage }}
      webfrontendContainerImage: ${{ needs.deploy-shared.outputs.webfrontendContainerImage }}
    secrets: inherit
